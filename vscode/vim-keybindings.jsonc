[
  /**
   * Global command
   */
  {
    "key": "ctrl+k ctrl+v",
    "command": "toggleVim"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveFiles"
  },

  /**
   * Code navigation
   */
  {
    "key": "ctrl+f",
    "command": "-extension.vim_ctrl+f",
    "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+k ctrl+space",
    "command": "editor.action.openLink"
  },

  /**
   * Window management
   */
  {
    "key": "ctrl+k ctrl+k",
    "command": "runCommands",
    "args": {
      "commands": ["workbench.action.closeEditorsInOtherGroups", "workbench.action.closeOtherEditors"]
    }
  },
  {
    "key": "ctrl+q",
    "command": "-extension.vim_winCtrlQ",
    "when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.closeAuxiliaryBar",
    "when": "auxiliaryBarFocus"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.closeSidebar",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus && vim.use<C-w>"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.previousPanelView",
    "when": "panelFocus"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.previousEditor",
    "when": "!panelFocus"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.nextPanelView",
    "when": "panelFocus"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.nextEditor",
    "when": "!panelFocus"
  },
  {
    "key": "ctrl+w h",
    "command": "workbench.action.navigateLeft",
    "when": "!editorTextFocus && vim.active && vim.use<C-w>"
  },
  {
    "key": "ctrl+w l",
    "command": "workbench.action.navigateRight",
    "when": "!editorTextFocus && vim.active && vim.use<C-w>"
  },
  {
    "key": "ctrl+w j",
    "command": "workbench.action.navigateDown",
    "when": "!editorTextFocus && vim.active && vim.use<C-w>"
  },
  {
    "key": "ctrl+w k",
    "command": "workbench.action.navigateUp",
    "when": "!editorTextFocus && vim.active && vim.use<C-w>"
  },
  {
    "key": "ctrl+w h",
    "command": "workbench.view.explorer",
    "when": "!editorIsOpen"
  },
  {
    "key": "ctrl+w l",
    "command": "terminal.focus",
    "when": "!editorIsOpen"
  },

  /**
   * Menu navigation
   */
  {
    "key": "ctrl+p",
    "command": "-extension.vim_ctrl+p"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "when": "codeActionMenuVisible",
    "command": "selectNextCodeAction"
  },
  {
    "key": "ctrl+p",
    "when": "codeActionMenuVisible",
    "command": "selectPrevCodeAction"
  },

  /**
   * Multi cursor
   */
  {
    "key": "shift+8",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorTextFocus && editorHasSelection"
  },

  /**
   * Copilot
   * ref: https://github.com/VSCodeVim/Vim/issues/9459#issuecomment-2648156285
   */
  {
    "key": "tab",
    "command": "-extension.vim_tab"
  },
  {
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.inlineSuggest.trigger",
    "when": "editorTextFocus && !inlineSuggestionVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.inlineSuggest.showNext",
    "when": "editorTextFocus && inlineSuggestionVisible"
  },
  {
    "key": "escape",
    "command": "runCommands",
    "when": "(inlineEditIsVisible || inlineSuggestionVisible)",
    "args": {
      "commands": ["editor.action.inlineSuggest.hide", "extension.vim_escape"]
    }
  },
  {
    "key": "ctrl+end",
    "command": "editor.action.inlineSuggest.acceptNextLine",
    "when": "editorTextFocus && inlineSuggestionVisible"
  },
  {
    "key": "ctrl+shift+i",
    "command": "inlineChat.start",
    "when": "editorFocus && inlineChatHasProvider && inlineChatPossible && !editorReadonly && !editorSimpleInput"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.terminal.chat.start",
    "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.chat.startVoiceChat",
    "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.chat.stopListeningAndSubmit",
    "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
  },

  /**
   * Source control
   */
  {
    "key": "ctrl+k ctrl+d",
    "command": "runCommands",
    "when": "isInDiffEditor",
    "args": {
      "commands": ["git.openFile", "git.closeAllDiffEditors"]
    }
  },
  {
    "key": "ctrl+k ctrl+d",
    "command": "git.openChange",
    "when": "!isInDiffEditor"
  },

  /**
   * File explorer
   * Ref: https://github.com/vscode-neovim/vscode-neovim#explorer-file-manipulation
   */
  {
    "key": "/",
    "command": "list.find",
    "when": "listFocus && listSupportsFind && !inputFocus"
  },
  {
    "key": "a",
    "command": "workbench.files.action.createFileFromExplorer",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "workbench.files.action.createFolderFromExplorer",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
  }
]
